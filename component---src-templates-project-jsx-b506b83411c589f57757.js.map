{"version":3,"sources":["webpack:///./src/templates/project.jsx","webpack:///./src/components/_ui/Button.jsx"],"names":["ProjectHeroContainer","colors","grey200","ProjectTitle","ProjectBody","WorkButtons","WorkLink","Link","WorkAnchor","ProjectViewLink","url","includes","href","className","Project","project","meta","title","project_title","text","titleTemplate","name","content","description","property","author","concat","RichText","render","project_hero_image","src","alt","project_description","project_url","to","data","projectContent","prismic","allProjects","edges","node","site","siteMetadata","query","ButtonContainer","blue400","dimensions","maxwidthMobile","pink400","purple400","blue200","blue600","blue300","Button","this","props","children","onClick","Component"],"mappings":"gPAUMA,EAAuB,YAAO,MAAP,sBAAH,cACRC,IAAOC,QADC,4KAgBpBC,EAAe,YAAO,MAAP,sBAAH,4EAMZC,EAAc,YAAO,MAAP,sBAAH,0HAcXC,EAAc,YAAO,MAAP,sBAAH,2FAOXC,EAAW,YAAOC,OAAP,sBAAH,6DAKRC,EAAa,YAAO,IAAP,sBAAH,+DAIVC,EAAkB,SAAC,GAAW,IAAVC,EAAS,EAATA,IACxB,OAAIA,EAAIC,SAAS,QAEb,YAACH,EAAD,CAAYI,KAAMF,GAChB,YAAC,IAAD,CAAQG,UAAU,qBAAlB,aAKKH,EAAIC,SAAS,cAEpB,YAACH,EAAD,CAAYI,KAAMF,GAChB,YAAC,IAAD,CAAQG,UAAU,qBAAlB,mBAMJ,YAACL,EAAD,CAAYI,KAAMF,GAChB,YAAC,IAAD,CAAQG,UAAU,qBAAlB,kBAOAC,EAAU,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC1B,OACE,oCACE,YAAC,IAAD,CACEC,MAAK,GAAKF,EAAQG,cAAc,GAAGC,KACnCC,cAAa,0BACbJ,KAAM,CACJ,CACEK,KAAK,cACLC,QAASN,EAAKO,aAEhB,CACEC,SAAS,WACTF,QAAYP,EAAQG,cAAc,GAAGC,KAA9B,kBAET,CACEK,SAAS,iBACTF,QAASN,EAAKO,aAEhB,CACEC,SAAS,UACTF,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKS,QAEhB,CACEJ,KAAK,gBACLC,QAASN,EAAKC,OAEhB,CACEI,KAAK,sBACLC,QAASN,EAAKO,cAEhBG,OAAOV,KAEX,YAAC,IAAD,KACE,YAACb,EAAD,KACGwB,WAASC,OAAOb,EAAQG,gBAE1BH,EAAQc,oBACP,YAAC7B,EAAD,KACE,mBAAK8B,IAAKf,EAAQc,mBAAmBnB,IAAKqB,IAAI,UAGlD,YAAC3B,EAAD,KACGuB,WAASC,OAAOb,EAAQiB,qBACzB,YAAC3B,EAAD,KACE,YAACI,EAAD,CAAiBC,IAAKK,EAAQkB,YAAY,GAAGd,OAC7C,YAACb,EAAD,CAAU4B,GAAI,SACZ,YAAC,IAAD,CAAQrB,UAAU,qBAAlB,wBAWC,sBAAe,IAAZsB,EAAW,EAAXA,KACVC,EAAiBD,EAAKE,QAAQC,YAAYC,MAAM,GAAGC,KACnDxB,EAAOmB,EAAKM,KAAKC,aACvB,OACE,YAAC5B,EAAD,CAASC,QAASqB,EAAgBpB,KAAMA,KAQrC,IAAM2B,EAAK,c,yTCjKlB,IAAMC,EAAkB,YAAO,SAAP,qBAAH,8BAEH3C,IAAO4C,QAFJ,qKAYEC,IAAWC,eAZb,kKA4ByB9C,IAAO+C,QA5BhC,OA4B+C/C,IAAOgD,UA5BtD,4IAuCChD,IAAOiD,QAvCR,UAwCJjD,IAAOkD,QAxCH,8DA6CKlD,IAAOmD,QA7CZ,+CAmDfC,E,gLACFzB,OAAA,WAAU,IAAD,EAC0B0B,KAAKC,MAAfA,GADhB,EACGC,S,oIADH,kBAEL,OACI,YAACZ,EAAD,GACIa,QAASH,KAAKC,MAAME,SAChBF,GACHD,KAAKC,MAAMC,W,GAPPE,aAaNL","file":"component---src-templates-project-jsx-b506b83411c589f57757.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport styled from \"@emotion/styled\"\r\nimport colors from \"styles/colors\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { RichText } from \"prismic-reactjs\"\r\nimport Button from \"components/_ui/Button\"\r\nimport Layout from \"components/Layout\"\r\n\r\nconst ProjectHeroContainer = styled(\"div\")`\r\n    background: ${colors.grey200};\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n    overflow: hidden;\r\n    position: relative;\r\n    padding-top: 1em;\r\n    padding-bottom: 1em;\r\n    margin-bottom: 3.5em;\r\n\r\n    img {\r\n        max-width: 600px;\r\n    }\r\n`\r\n\r\nconst ProjectTitle = styled(\"div\")`\r\n    max-width: 550px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n`\r\n\r\nconst ProjectBody = styled(\"div\")`\r\n    max-width: 750px;\r\n    margin: 0 auto;\r\n\r\n    .block-img {\r\n        margin-top: 3.5em;\r\n        margin-bottom: 0.5em;\r\n\r\n        img {\r\n            width: 100%;\r\n        }\r\n    }\r\n`\r\n\r\nconst WorkButtons = styled(\"div\")`\r\n    margin: 0 auto;\r\n    margin-top: 1.5em;\r\n    display: block;\r\n    text-align: center;\r\n`\r\n\r\nconst WorkLink = styled(Link)`\r\n    text-align: center;\r\n    margin-left: 4px;\r\n`\r\n\r\nconst WorkAnchor = styled(\"a\")`\r\n    text-align: center;\r\n    margin-right: 4px;\r\n`\r\nconst ProjectViewLink = ({url}) => {\r\n  if (url.includes(\".pdf\")) {\r\n    return (\r\n      <WorkAnchor href={url}>\r\n        <Button className=\"Button--secondary\">\r\n          View PDF\r\n        </Button>\r\n      </WorkAnchor>\r\n    )\r\n  } else if (url.includes(\"github.com\")) {\r\n    return (\r\n      <WorkAnchor href={url}>\r\n        <Button className=\"Button--secondary\">\r\n          View on GitHub\r\n        </Button>\r\n      </WorkAnchor>)\r\n  }\r\n  return (\r\n    <WorkAnchor href={url}>\r\n      <Button className=\"Button--secondary\">\r\n        View Project\r\n      </Button>\r\n    </WorkAnchor>\r\n  )\r\n}\r\n\r\nconst Project = ({ project, meta }) => {\r\n  return (\r\n    <>\r\n      <Helmet\r\n        title={`${project.project_title[0].text}`}\r\n        titleTemplate={`%s | Work | Faiz Surani`}\r\n        meta={[\r\n          {\r\n            name: `description`,\r\n            content: meta.description,\r\n          },\r\n          {\r\n            property: `og:title`,\r\n            content: `${project.project_title[0].text} | Faiz Surani`,\r\n          },\r\n          {\r\n            property: `og:description`,\r\n            content: meta.description,\r\n          },\r\n          {\r\n            property: `og:type`,\r\n            content: `website`,\r\n          },\r\n          {\r\n            name: `twitter:card`,\r\n            content: `summary`,\r\n          },\r\n          {\r\n            name: `twitter:creator`,\r\n            content: meta.author,\r\n          },\r\n          {\r\n            name: `twitter:title`,\r\n            content: meta.title,\r\n          },\r\n          {\r\n            name: `twitter:description`,\r\n            content: meta.description,\r\n          },\r\n        ].concat(meta)}\r\n      />\r\n      <Layout>\r\n        <ProjectTitle>\r\n          {RichText.render(project.project_title)}\r\n        </ProjectTitle>\r\n        {project.project_hero_image && (\r\n          <ProjectHeroContainer>\r\n            <img src={project.project_hero_image.url} alt=\"bees\"/>\r\n          </ProjectHeroContainer>\r\n        )}\r\n        <ProjectBody>\r\n          {RichText.render(project.project_description)}\r\n          <WorkButtons>\r\n            <ProjectViewLink url={project.project_url[0].text} />\r\n            <WorkLink to={\"/work\"}>\r\n              <Button className=\"Button--secondary\">\r\n                See other work\r\n              </Button>\r\n            </WorkLink>\r\n          </WorkButtons>\r\n        </ProjectBody>\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ({ data }) => {\r\n  const projectContent = data.prismic.allProjects.edges[0].node\r\n  const meta = data.site.siteMetadata\r\n  return (\r\n    <Project project={projectContent} meta={meta}/>\r\n  )\r\n}\r\n\r\nProject.propTypes = {\r\n  project: PropTypes.object.isRequired,\r\n}\r\n\r\nexport const query = graphql`\r\n    query ProjectQuery($uid: String) {\r\n        prismic {\r\n            allProjects(uid: $uid) {\r\n                edges {\r\n                    node {\r\n                        project_title\r\n                        project_preview_description\r\n                        project_preview_thumbnail\r\n                        project_category\r\n                        project_post_date\r\n                        project_hero_image\r\n                        project_description\r\n                        project_url\r\n                        _meta {\r\n                            uid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        site {\r\n            siteMetadata {\r\n                title\r\n                description\r\n                author\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React, { Component } from 'react';\r\nimport styled from \"@emotion/styled\";\r\nimport colors from \"styles/colors\";\r\nimport dimensions from \"styles/dimensions\";\r\n\r\nconst ButtonContainer = styled(\"button\")`\r\n    padding: 1em 2em;\r\n    background: ${colors.blue400};\r\n    font-weight: 600;\r\n    color: white;\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n    border-radius: 2px;\r\n    position: relative;\r\n    transition: background 100ms ease-in-out;\r\n\r\n    @media(max-width:${dimensions.maxwidthMobile}px) {\r\n        padding: 0.8em 1.8em;\r\n        font-size: 1em;\r\n    }\r\n\r\n    p {\r\n        margin: 0;\r\n    }\r\n\r\n    &:before {\r\n        content: \"\";\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: linear-gradient(135deg, ${colors.pink400} 0%, ${colors.purple400} 100%);\r\n        z-index: -1;\r\n    }\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        background: transparent;\r\n        transition: background 100ms ease-in-out;\r\n    }\r\n\r\n    &.Button--secondary {\r\n        background: ${colors.blue200};\r\n        color: ${colors.blue600};\r\n        padding: 0.95em 1.8em;\r\n        font-size: 0.95rem;\r\n\r\n        &:hover {\r\n            background: ${colors.blue300};\r\n            transition: background 100ms ease-in-out;\r\n        }\r\n    }\r\n`\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        const { children, ...props } = this.props;\r\n        return (\r\n            <ButtonContainer\r\n                onClick={this.props.onClick}\r\n                {...props}>\r\n                {this.props.children}\r\n            </ButtonContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;"],"sourceRoot":""}